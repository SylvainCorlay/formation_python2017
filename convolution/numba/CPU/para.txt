----------------------------------ASSEMBLY nrt----------------------------------
	.text
	.file	"<string>"
	.globl	nrt_atomic_add
	.p2align	4, 0x90
	.type	nrt_atomic_add,@function
nrt_atomic_add:
	movl	$1, %eax
	lock		xaddq	%rax, (%rdi)
	addq	$1, %rax
	retq
.Lfunc_end0:
	.size	nrt_atomic_add, .Lfunc_end0-nrt_atomic_add

	.globl	nrt_atomic_sub
	.p2align	4, 0x90
	.type	nrt_atomic_sub,@function
nrt_atomic_sub:
	movq	$-1, %rax
	lock		xaddq	%rax, (%rdi)
	addq	$-1, %rax
	retq
.Lfunc_end1:
	.size	nrt_atomic_sub, .Lfunc_end1-nrt_atomic_sub

	.globl	nrt_atomic_cas
	.p2align	4, 0x90
	.type	nrt_atomic_cas,@function
nrt_atomic_cas:
	xorl	%r8d, %r8d
	movq	%rsi, %rax
	lock		cmpxchgq	%rdx, (%rdi)
	sete	%r8b
	movq	%rax, (%rcx)
	movl	%r8d, %eax
	retq
.Lfunc_end2:
	.size	nrt_atomic_cas, .Lfunc_end2-nrt_atomic_cas

	.globl	NRT_MemInfo_data_fast
	.p2align	4, 0x90
	.type	NRT_MemInfo_data_fast,@function
NRT_MemInfo_data_fast:
	movq	24(%rdi), %rax
	retq
.Lfunc_end3:
	.size	NRT_MemInfo_data_fast, .Lfunc_end3-NRT_MemInfo_data_fast

	.globl	NRT_incref
	.p2align	4, 0x90
	.type	NRT_incref,@function
NRT_incref:
	testq	%rdi, %rdi
	je	.LBB4_1
	lock		addq	$1, (%rdi)
	retq
.LBB4_1:
	retq
.Lfunc_end4:
	.size	NRT_incref, .Lfunc_end4-NRT_incref

	.globl	NRT_decref
	.p2align	4, 0x90
	.type	NRT_decref,@function
NRT_decref:
	.cfi_startproc
	testq	%rdi, %rdi
	je	.LBB5_2
	movq	$-1, %rax
	lock		xaddq	%rax, (%rdi)
	cmpq	$1, %rax
	je	.LBB5_3
.LBB5_2:
	retq
.LBB5_3:
	movabsq	$NRT_MemInfo_call_dtor, %rax
	jmpq	*%rax
.Lfunc_end5:
	.size	NRT_decref, .Lfunc_end5-NRT_decref
	.cfi_endproc

	.globl	nrt_unresolved_abort
	.p2align	4, 0x90
	.type	nrt_unresolved_abort,@function
nrt_unresolved_abort:
	movabsq	$.const.picklebuf.140449007729480, %rax
	movq	%rax, (%rsi)
	movl	$1, %eax
	retq
.Lfunc_end6:
	.size	nrt_unresolved_abort, .Lfunc_end6-nrt_unresolved_abort

	.type	.const.picklebuf.140449007729480,@object
	.section	.rodata,"a",@progbits
	.p2align	3
.const.picklebuf.140449007729480:
	.quad	.const.pickledata.140449007729480
	.long	101
	.zero	4
	.size	.const.picklebuf.140449007729480, 16

	.type	.const.pickledata.140449007729480,@object
	.p2align	4
.const.pickledata.140449007729480:
	.ascii	"\200\004\225Z\000\000\000\000\000\000\000\214\bbuiltins\224\214\fRuntimeError\224\223\224\2146numba jitted function aborted due to unresolved symbol\224\205\224\206\224."
	.size	.const.pickledata.140449007729480, 101


	.section	".note.GNU-stack","",@progbits

================================================================================
-------------------------------ASSEMBLY test_para-------------------------------
	.text
	.file	"test_para"
	.globl	_ZN8__main__13test_para$241Ex5ArrayIdLi1E1C7mutable7alignedE5ArrayIdLi1E1C7mutable7alignedE
	.p2align	4, 0x90
	.type	_ZN8__main__13test_para$241Ex5ArrayIdLi1E1C7mutable7alignedE5ArrayIdLi1E1C7mutable7alignedE,@function
_ZN8__main__13test_para$241Ex5ArrayIdLi1E1C7mutable7alignedE5ArrayIdLi1E1C7mutable7alignedE:
	pushq	%rbx
	movq	16(%rsp), %rax
	testq	%rax, %rax
	jle	.LBB0_17
	movq	88(%rsp), %r9
	movq	32(%rsp), %r8
	vcvtsi2sdq	%rcx, %xmm0, %xmm0
	movq	%rax, %rcx
	notq	%rcx
	cmpq	$-3, %rcx
	movq	$-2, %rdx
	cmovgq	%rcx, %rdx
	leaq	2(%rdx,%rax), %r10
	cmpq	$16, %r10
	jae	.LBB0_3
	xorl	%r11d, %r11d
	jmp	.LBB0_15
.LBB0_3:
	movq	%r10, %r11
	andq	$-16, %r11
	je	.LBB0_7
	cmpq	$-3, %rcx
	movq	$-2, %rdx
	cmovgq	%rcx, %rdx
	addq	%rax, %rdx
	leaq	16(%r8,%rdx,8), %rcx
	cmpq	%r9, %rcx
	jbe	.LBB0_8
	leaq	16(%r9,%rdx,8), %rcx
	cmpq	%r8, %rcx
	jbe	.LBB0_8
.LBB0_7:
	xorl	%r11d, %r11d
.LBB0_15:
	addq	$1, %rax
	leaq	(%r9,%r11,8), %rcx
	leaq	(%r8,%r11,8), %rdx
	.p2align	4, 0x90
.LBB0_16:
	vmulsd	(%rdx), %xmm0, %xmm1
	vaddsd	(%rcx), %xmm1, %xmm1
	vmovsd	%xmm1, (%rcx)
	addq	$-1, %rax
	addq	$8, %rcx
	addq	$8, %rdx
	cmpq	$1, %rax
	jg	.LBB0_16
.LBB0_17:
	movq	$0, (%rdi)
	xorl	%eax, %eax
	popq	%rbx
	vzeroupper
	retq
.LBB0_8:
	vbroadcastsd	%xmm0, %ymm1
	leaq	-16(%r11), %rdx
	movq	%rdx, %rcx
	shrq	$4, %rcx
	btl	$4, %edx
	jb	.LBB0_10
	vmulpd	(%r8), %ymm1, %ymm2
	vmulpd	32(%r8), %ymm1, %ymm3
	vmulpd	64(%r8), %ymm1, %ymm4
	vmulpd	96(%r8), %ymm1, %ymm5
	vaddpd	(%r9), %ymm2, %ymm2
	vaddpd	32(%r9), %ymm3, %ymm3
	vaddpd	64(%r9), %ymm4, %ymm4
	vaddpd	96(%r9), %ymm5, %ymm5
	vmovupd	%ymm2, (%r9)
	vmovupd	%ymm3, 32(%r9)
	vmovupd	%ymm4, 64(%r9)
	vmovupd	%ymm5, 96(%r9)
	movl	$16, %ebx
	testq	%rcx, %rcx
	jne	.LBB0_11
	jmp	.LBB0_13
.LBB0_10:
	xorl	%ebx, %ebx
	testq	%rcx, %rcx
	je	.LBB0_13
.LBB0_11:
	leaq	224(%r8,%rbx,8), %rsi
	leaq	224(%r9,%rbx,8), %rdx
	movq	%r11, %rcx
	subq	%rbx, %rcx
	.p2align	4, 0x90
.LBB0_12:
	vmulpd	-224(%rsi), %ymm1, %ymm2
	vmulpd	-192(%rsi), %ymm1, %ymm3
	vmulpd	-160(%rsi), %ymm1, %ymm4
	vmulpd	-128(%rsi), %ymm1, %ymm5
	vaddpd	-224(%rdx), %ymm2, %ymm2
	vaddpd	-192(%rdx), %ymm3, %ymm3
	vaddpd	-160(%rdx), %ymm4, %ymm4
	vaddpd	-128(%rdx), %ymm5, %ymm5
	vmovupd	%ymm2, -224(%rdx)
	vmovupd	%ymm3, -192(%rdx)
	vmovupd	%ymm4, -160(%rdx)
	vmovupd	%ymm5, -128(%rdx)
	vmulpd	-96(%rsi), %ymm1, %ymm2
	vmulpd	-64(%rsi), %ymm1, %ymm3
	vmulpd	-32(%rsi), %ymm1, %ymm4
	vmulpd	(%rsi), %ymm1, %ymm5
	vaddpd	-96(%rdx), %ymm2, %ymm2
	vaddpd	-64(%rdx), %ymm3, %ymm3
	vaddpd	-32(%rdx), %ymm4, %ymm4
	vaddpd	(%rdx), %ymm5, %ymm5
	vmovupd	%ymm2, -96(%rdx)
	vmovupd	%ymm3, -64(%rdx)
	vmovupd	%ymm4, -32(%rdx)
	vmovupd	%ymm5, (%rdx)
	addq	$256, %rsi
	addq	$256, %rdx
	addq	$-32, %rcx
	jne	.LBB0_12
.LBB0_13:
	cmpq	%r11, %r10
	je	.LBB0_17
	subq	%r11, %rax
	jmp	.LBB0_15
.Lfunc_end0:
	.size	_ZN8__main__13test_para$241Ex5ArrayIdLi1E1C7mutable7alignedE5ArrayIdLi1E1C7mutable7alignedE, .Lfunc_end0-_ZN8__main__13test_para$241Ex5ArrayIdLi1E1C7mutable7alignedE5ArrayIdLi1E1C7mutable7alignedE

	.globl	_ZN7cpython8__main__13test_para$241Ex5ArrayIdLi1E1C7mutable7alignedE5ArrayIdLi1E1C7mutable7alignedE
	.p2align	4, 0x90
	.type	_ZN7cpython8__main__13test_para$241Ex5ArrayIdLi1E1C7mutable7alignedE5ArrayIdLi1E1C7mutable7alignedE,@function
_ZN7cpython8__main__13test_para$241Ex5ArrayIdLi1E1C7mutable7alignedE5ArrayIdLi1E1C7mutable7alignedE:
	.cfi_startproc
	pushq	%rbp
.Lcfi0:
	.cfi_def_cfa_offset 16
.Lcfi1:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Lcfi2:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	andq	$-32, %rsp
	subq	$224, %rsp
.Lcfi3:
	.cfi_offset %rbx, -56
.Lcfi4:
	.cfi_offset %r12, -48
.Lcfi5:
	.cfi_offset %r13, -40
.Lcfi6:
	.cfi_offset %r14, -32
.Lcfi7:
	.cfi_offset %r15, -24
	movq	%rdi, %rbx
	leaq	24(%rsp), %rax
	movq	%rax, (%rsp)
	movabsq	$.const.test_para, %r10
	movabsq	$PyArg_UnpackTuple, %r11
	leaq	40(%rsp), %r8
	leaq	32(%rsp), %r9
	movl	$3, %edx
	movl	$3, %ecx
	xorl	%eax, %eax
	movq	%rsi, %rdi
	movq	%r10, %rsi
	callq	*%r11
	vxorpd	%ymm0, %ymm0, %ymm0
	vmovupd	%ymm0, 88(%rsp)
	vmovapd	%ymm0, 64(%rsp)
	vmovupd	%ymm0, 152(%rsp)
	vmovapd	%ymm0, 128(%rsp)
	testl	%eax, %eax
	je	.LBB1_30
	testq	%rbx, %rbx
	je	.LBB1_31
	cmpq	$0, 24(%rbx)
	je	.LBB1_27
	movq	40(%rsp), %rdi
	movabsq	$PyNumber_Long, %rax
	vzeroupper
	callq	*%rax
	movq	%rax, %rbx
	testq	%rbx, %rbx
	je	.LBB1_28
	movabsq	$PyLong_AsLongLong, %rax
	movq	%rbx, %rdi
	callq	*%rax
	movq	%rax, %r14
	movabsq	$Py_DecRef, %rax
	movq	%rbx, %rdi
	callq	*%rax
	vcvtsi2sdq	%r14, %xmm1, %xmm0
.LBB1_5:
	vmovapd	%xmm0, 48(%rsp)
	movabsq	$PyErr_Occurred, %rax
	callq	*%rax
	testq	%rax, %rax
	jne	.LBB1_30
	movq	32(%rsp), %rdi
	movabsq	$NRT_adapt_ndarray_from_python, %r15
	leaq	64(%rsp), %rsi
	callq	*%r15
	testl	%eax, %eax
	jne	.LBB1_30
	movq	64(%rsp), %r14
	movq	80(%rsp), %rbx
	movq	96(%rsp), %r12
	movq	24(%rsp), %rdi
	leaq	128(%rsp), %rsi
	callq	*%r15
	testl	%eax, %eax
	jne	.LBB1_29
	movq	128(%rsp), %r15
	movq	160(%rsp), %r13
	movabsq	$PyEval_SaveThread, %rax
	callq	*%rax
	testq	%rbx, %rbx
	vmovapd	48(%rsp), %xmm5
	jle	.LBB1_25
	movq	%rbx, %rcx
	notq	%rcx
	cmpq	$-3, %rcx
	movq	$-2, %rdx
	cmovgq	%rcx, %rdx
	leaq	2(%rbx,%rdx), %r8
	cmpq	$16, %r8
	jae	.LBB1_11
	xorl	%edx, %edx
	jmp	.LBB1_23
.LBB1_11:
	movq	%r8, %rdx
	andq	$-16, %rdx
	je	.LBB1_15
	cmpq	$-3, %rcx
	movq	$-2, %rsi
	cmovgq	%rcx, %rsi
	addq	%rbx, %rsi
	leaq	16(%r12,%rsi,8), %rcx
	cmpq	%rcx, %r13
	jae	.LBB1_16
	leaq	16(%r13,%rsi,8), %rcx
	cmpq	%rcx, %r12
	jae	.LBB1_16
.LBB1_15:
	xorl	%edx, %edx
.LBB1_23:
	addq	$1, %rbx
	leaq	(%r13,%rdx,8), %rcx
	leaq	(%r12,%rdx,8), %rdx
	.p2align	4, 0x90
.LBB1_24:
	vmulsd	(%rdx), %xmm5, %xmm0
	vaddsd	(%rcx), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx)
	addq	$-1, %rbx
	addq	$8, %rcx
	addq	$8, %rdx
	cmpq	$1, %rbx
	jg	.LBB1_24
.LBB1_25:
	movabsq	$PyEval_RestoreThread, %rcx
	movq	%rax, %rdi
	vzeroupper
	callq	*%rcx
	movabsq	$NRT_decref, %rbx
	movq	%r14, %rdi
	callq	*%rbx
	movq	%r15, %rdi
	callq	*%rbx
	movabsq	$_Py_NoneStruct, %rbx
	movabsq	$Py_IncRef, %rax
	movq	%rbx, %rdi
	callq	*%rax
	movq	%rbx, %rax
.LBB1_26:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	vzeroupper
	retq
.LBB1_16:
	vbroadcastsd	%xmm5, %ymm0
	leaq	-16(%rdx), %rsi
	movq	%rsi, %rcx
	shrq	$4, %rcx
	btl	$4, %esi
	jb	.LBB1_18
	vmulpd	(%r12), %ymm0, %ymm1
	vmulpd	32(%r12), %ymm0, %ymm2
	vmulpd	64(%r12), %ymm0, %ymm3
	vmulpd	96(%r12), %ymm0, %ymm4
	vaddpd	(%r13), %ymm1, %ymm1
	vaddpd	32(%r13), %ymm2, %ymm2
	vaddpd	64(%r13), %ymm3, %ymm3
	vaddpd	96(%r13), %ymm4, %ymm4
	vmovupd	%ymm1, (%r13)
	vmovupd	%ymm2, 32(%r13)
	vmovupd	%ymm3, 64(%r13)
	vmovupd	%ymm4, 96(%r13)
	movl	$16, %r9d
	testq	%rcx, %rcx
	jne	.LBB1_19
	jmp	.LBB1_21
.LBB1_18:
	xorl	%r9d, %r9d
	testq	%rcx, %rcx
	je	.LBB1_21
.LBB1_19:
	leaq	224(%r12,%r9,8), %rsi
	leaq	224(%r13,%r9,8), %rdi
	movq	%rdx, %rcx
	subq	%r9, %rcx
	.p2align	4, 0x90
.LBB1_20:
	vmulpd	-224(%rsi), %ymm0, %ymm1
	vmulpd	-192(%rsi), %ymm0, %ymm2
	vmulpd	-160(%rsi), %ymm0, %ymm3
	vmulpd	-128(%rsi), %ymm0, %ymm4
	vaddpd	-224(%rdi), %ymm1, %ymm1
	vaddpd	-192(%rdi), %ymm2, %ymm2
	vaddpd	-160(%rdi), %ymm3, %ymm3
	vaddpd	-128(%rdi), %ymm4, %ymm4
	vmovupd	%ymm1, -224(%rdi)
	vmovupd	%ymm2, -192(%rdi)
	vmovupd	%ymm3, -160(%rdi)
	vmovupd	%ymm4, -128(%rdi)
	vmulpd	-96(%rsi), %ymm0, %ymm1
	vmulpd	-64(%rsi), %ymm0, %ymm2
	vmulpd	-32(%rsi), %ymm0, %ymm3
	vmulpd	(%rsi), %ymm0, %ymm4
	vaddpd	-96(%rdi), %ymm1, %ymm1
	vaddpd	-64(%rdi), %ymm2, %ymm2
	vaddpd	-32(%rdi), %ymm3, %ymm3
	vaddpd	(%rdi), %ymm4, %ymm4
	vmovupd	%ymm1, -96(%rdi)
	vmovupd	%ymm2, -64(%rdi)
	vmovupd	%ymm3, -32(%rdi)
	vmovupd	%ymm4, (%rdi)
	addq	$256, %rsi
	addq	$256, %rdi
	addq	$-32, %rcx
	jne	.LBB1_20
.LBB1_21:
	cmpq	%rdx, %r8
	je	.LBB1_25
	subq	%rdx, %rbx
	jmp	.LBB1_23
.LBB1_27:
	movabsq	$PyExc_RuntimeError, %rdi
	movabsq	$".const.missing Environment", %rsi
	movabsq	$PyErr_SetString, %rax
	vzeroupper
	callq	*%rax
	jmp	.LBB1_30
.LBB1_28:
	vxorpd	%xmm0, %xmm0, %xmm0
	jmp	.LBB1_5
.LBB1_29:
	movabsq	$NRT_decref, %rax
	movq	%r14, %rdi
	callq	*%rax
.LBB1_30:
	xorl	%eax, %eax
	jmp	.LBB1_26
.LBB1_31:
	movabsq	$".const.Fatal error: missing _dynfunc.Closure", %rdi
	movabsq	$puts, %rax
	vzeroupper
	callq	*%rax
.Lfunc_end1:
	.size	_ZN7cpython8__main__13test_para$241Ex5ArrayIdLi1E1C7mutable7alignedE5ArrayIdLi1E1C7mutable7alignedE, .Lfunc_end1-_ZN7cpython8__main__13test_para$241Ex5ArrayIdLi1E1C7mutable7alignedE5ArrayIdLi1E1C7mutable7alignedE
	.cfi_endproc

	.weak	NRT_decref
	.p2align	4, 0x90
	.type	NRT_decref,@function
NRT_decref:
	.cfi_startproc
	testq	%rdi, %rdi
	je	.LBB2_2
	movq	$-1, %rax
	lock		xaddq	%rax, (%rdi)
	cmpq	$1, %rax
	je	.LBB2_3
.LBB2_2:
	retq
.LBB2_3:
	movabsq	$NRT_MemInfo_call_dtor, %rax
	jmpq	*%rax
.Lfunc_end2:
	.size	NRT_decref, .Lfunc_end2-NRT_decref
	.cfi_endproc

	.type	.const.test_para,@object
	.section	.rodata,"a",@progbits
.const.test_para:
	.asciz	"test_para"
	.size	.const.test_para, 10

	.type	".const.Fatal error: missing _dynfunc.Closure",@object
	.p2align	4
".const.Fatal error: missing _dynfunc.Closure":
	.asciz	"Fatal error: missing _dynfunc.Closure"
	.size	".const.Fatal error: missing _dynfunc.Closure", 38

	.type	".const.missing Environment",@object
	.p2align	4
".const.missing Environment":
	.asciz	"missing Environment"
	.size	".const.missing Environment", 20


	.section	".note.GNU-stack","",@progbits

================================================================================
